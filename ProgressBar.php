<?php
/* vim: set expandtab tabstop=4 softtabstop=4 shiftwidth=4: */
// +----------------------------------------------------------------------+
// | This source file is subject to version 3.0 of the PHP license,       |
// | that is bundled with this package in the file LICENSE, and is        |
// | available at through the world-wide-web at                           |
// | http://www.php.net/license/3_0.txt.                                  |
// | If you did not receive a copy of the PHP license and are unable to   |
// | obtain it through the world-wide-web, please send a note to          |
// | license@php.net so we can mail you a copy immediately.               |
// +----------------------------------------------------------------------+
// | Authors: Stefan Walk <post@fuer-et.de>                               |
// +----------------------------------------------------------------------+
//
// $Id$

 require_once 'PEAR.php';

/**
 * Class to display a progressbar in the console
 *
 * @package Console_ProgressBar
 * @category Console
 * @version 0.1
 * @author Stefan Walk <post@fuer-et.de>
 * @license http://www.php.net/license/3_0.txt PHP License
 */
class Console_ProgressBar {

    // properties {{{
    /**
     * Format string to the left of the bar
     */
    var $_prefix;
    /**
     * Format string to the right of the bar
     */
    var $_suffix;
    /**
     * The bar gets filled with this
     */
    var $_bar;
    /**
     * The width of the bar
     */
    var $_barwidth;
    /**
     * The position of the counter when the job is `done'
     */
    var $_target_num;
    /**
     * Width of the display
     */
    var $_width;
    /**
     * Skeleton for use with sprintf
     */
    var $_skeleton;
    /**
     * Name of the progress bar, gets passed to every display function
     */
    var $_name;
    /**
     * The empty bar gets filled with this character
     */
    var $_progfill;
    /**
     * If the width passed to the constructor or reset means the width of the
     * display (when true) or of the bar
     */
    var $_width_absolute;
    // }}}
    
    // constructor {{{
    /**
     * Constructor, sets format and size
     *
     * The bar is composed like that:
     * $prefix.$bar.$suffix
     * The bar gets generated by this class, all you have to do is specify how
     * it should look like by passing format strings to this method. The format
     * identifiers are used with sprintf, have a look at
     * http://www.php.net/sprintf for a close documentation on how to use them,
     * the 's' in the following can be replaced by anything sprintf allows.
     * %1$s is reserved, it's used for displaying the bar.
     * %2$s represents the name of the bar.
     * %3$s represents the current position of the internal counter
     * %4$s represents the maximum position of the internal counter
     * %5$s represents the progress in percent
     *
     * Others will come, like elapsed time, speed and ETA.
     * A sample set of parameters would be:
     * $bar = new Console_ProgressBar('* %2$s %3$3d/%4$3d KB [', '=>', 15, 
     *                                '] %5$3.2f%%', 'stuff.tar', '-');
     * That would result in a bar like this:
     * * stuff.tar 391/900 KB [=====>---------]  43.44%
     * 
     *
     * @param string prefixformat Contains the format that is displayed
     *                            to the left of the bar
     * @param string progbar Contains the filled bar. If the bar is shorter than
     *                       the next string, barwidth, the leftmost character
     *                       of it is used to fill the remaining space. So, a
     *                       single '=' produces a bar filled entirely with
     *                       '='.
     * @param int barwidth The width of the bar.
     * @param string suffixformat The format that is displayed to the right of
     *                            the bar.
     * @param string name The name of the bar, see above at %2$s
     * @param string progfill The 'empty' section of the bar is filled with this
     *                        character.
     * @param bool $width_absolute If $barwidth should be the width of the
     *                             complete display instead of just the bar.
     * @see reset
     */ 
    function Console_ProgressBar($prefixformat, $progbar, $barwidth,
                                 $suffixformat, $name = '', $progfill = ' ',
                                 $width_absolute = false) 
    {
        $this->_prefix         = $prefixformat;
        $this->_suffix         = $suffixformat;
        $this->_bar            = $progbar;
        $this->_barwidth       = $barwidth;
        $this->_name           = $name;
        $this->_progfill       = $progfill{0};
        $this->_width_absolute = $width_absolute;
    }
    // }}}

    // reset() {{{
    /**
     * Re-sets format and size.
     *
     * The bar is composed like that:
     * $prefix.$bar.$suffix
     * The bar gets generated by this class, all you have to do is specify how
     * it should look like by passing format strings to this method. The format
     * identifiers are used with sprintf, have a look at
     * http://www.php.net/sprintf for a close documentation on how to use them,
     * the 's' in the following can be replaced by anything sprintf allows.
     * %1$s is reserved, it's used for displaying the bar.
     * %2$s represents the name of the bar.
     * %3$s represents the current position of the internal counter
     * %4$s represents the maximum position of the internal counter
     * %5$s represents the progress in percent
     *
     * Others will come, like elapsed time, speed and ETA.
     * A sample set of parameters would be:
     * $bar->reset('* %2$s %3$3d/%4$3d KB [', '=>', 15, '] %5$3.2f%%', 
     *             'stuff.tar', '-');
     * That would result in a bar like this:
     * * stuff.tar 391/900 KB [=====>---------]  43.44%
     * 
     *
     * @param string prefixformat Contains the format that is displayed
     *                            to the left of the bar
     * @param string progbar Contains the filled bar. If the bar is shorter than
     *                       the next string, barwidth, the leftmost character
     *                       of it is used to fill the remaining space. So, a
     *                       single '=' produces a bar filled entirely with
     *                       '='.
     * @param int barwidth The width of the bar.
     * @param string suffixformat The format that is displayed to the right of
     *                            the bar.
     * @param string name The name of the bar, see above at %2$s
     * @param string progfill The 'empty' section of the bar is filled with this
     *                        character.
     * @param bool $width_absolute If $barwidth should be the width of the
     *                             complete display instead of just the bar.
     */
    function reset($prefixformat, $progbar, $barwidth, $suffixformat, 
                   $name = '', $progfill = ' ', $with_absolute = false) 
    {
        $this->_prefix         = $prefixformat;
        $this->_suffix         = $suffixformat;
        $this->_bar            = $progbar;
        $this->_barwidth       = $barwidth;
        $this->_name           = $name;
        $this->_progfill       = $progfill{0};
        $this->_width_absolute = $width_absolute;
        return true;
    }
    // }}}
    
    // init() {{{
    /**
     * Initializes the bar (starts displaying it), passing the target number
     * ('100%') as an argument.
     *
     * @param int target_num
     * @return bool 
     */
    function init($target_num)
    {
        $this->_target_num = $target_num;
        $this->_skeleton = $this->_prefix . '%1$s'
                         . $this->_suffix;
        if (!$this->_width_absolute) {
            $this->_width = strlen(sprintf($this->_skeleton, 
                                           str_repeat($this->_progfill, 
                                                      $this->_barwidth), 
                                           $this->_name, 0, 0, 
                                           0.0 ));
        } else {
            $this->_width = $this->_barwidth;
            $len = strlen(sprintf($this->_skeleton, '',
                                  $this->_name, 0, 0, 
                                  0.0 ));
            $this->_barwidth = $this->_width - $len;
        }
        $l = sprintf($this->_skeleton, str_repeat($this->_progfill, 
                     $this->_barwidth), $this->_name, 
                     0, $this->_target_num, 0.0);
        print $l;
        return true;
    }
    // }}}
    
    // update() {{{
    /**
     * Updates the bar with new progress information
     *
     * @param int actual_num position of the progress counter
     * @return bool
     */
    function update($actual_num)
    {
        $barwidth = $this->_barwidth;
        $percent = $actual_num / $this->_target_num;
        $barsfilled = floor($percent * $barwidth);
        $diff = $barsfilled - strlen($this->_bar);
        if ($barsfilled == 0) {
            $display_bar = str_repeat($this->_progfill, 
                                      $this->_barwidth);
        } elseif ($diff <= 0) {
            $display_bar = substr($this->_bar,-$barsfilled);
            $display_bar.= str_repeat($this->_progfill, 
                                      $this->_barwidth - $barsfilled);
        } else {
            $lfillchar = $this->_bar{0};
            $display_bar = str_repeat($lfillchar, $diff);
            $display_bar.= $this->_bar;
            $display_bar.= str_repeat($this->_progfill, 
                                      $this->_barwidth - $barsfilled);
        }
        $line = sprintf($this->_skeleton, $display_bar,
                        $this->_name, $actual_num, $this->_target_num,
                        $percent*100);

        // erase previous line
        print str_repeat(chr(8), $this->_width);
        // print new one
        print $line;
        return true;
    }
    // }}}

    // finish() {{{
    /**
     * Finishes the display of the bar, 100% reached.
     *
     * @return bool
     */
    function finish()
    {
        $barwidth = $this->_barwidth;
        $percent = 1;
        $barsfilled = $barwidth;
        $actual_num = $this->_target_num;
        $diff = $barsfilled - strlen($this->_bar);
        if ($barsfilled == 0) {
            $display_bar.= str_repeat($this->_progfill, 
                                      $this->_barwidth - $barsfilled);
        } elseif ($diff <= 0) {
            $display_bar = substr($this->_bar,-$barsfilled);
            $display_bar.= str_repeat($this->_progfill, 
                                      $this->_barwidth - $barsfilled);
        } else {
            $lfillchar = $this->_bar{0};
            $display_bar = str_repeat($lfillchar, $diff);
            $display_bar.= $this->_bar;
            $display_bar.= str_repeat($this->_progfill, 
                                      $this->_barwidth - $barsfilled);
        }
        $line = sprintf($this->_skeleton, $display_bar, 
                        $this->_name, $actual_num, $this->_target_num,
                        $percent*100);
         
        // erase previous line
        print str_repeat(chr(8), $this->_width);
        // print new one
        print $line;
        return true;
    }
    // }}}
 
}


?>
